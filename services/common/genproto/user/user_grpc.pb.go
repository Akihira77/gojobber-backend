// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserService_SaveBuyerData_FullMethodName       = "/UserService/SaveBuyerData"
	UserService_FindSeller_FullMethodName          = "/UserService/FindSeller"
	UserService_UpdateSellerBalance_FullMethodName = "/UserService/UpdateSellerBalance"
	UserService_FindBuyer_FullMethodName           = "/UserService/FindBuyer"
)

// UserServiceClient is the client API for UserService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserServiceClient interface {
	SaveBuyerData(ctx context.Context, in *SaveBuyerRequest, opts ...grpc.CallOption) (*SaveBuyerResponse, error)
	FindSeller(ctx context.Context, in *FindSellerRequest, opts ...grpc.CallOption) (*FindSellerResponse, error)
	UpdateSellerBalance(ctx context.Context, in *UpdateSellerBalanceRequest, opts ...grpc.CallOption) (*UpdateSellerBalanceResponse, error)
	FindBuyer(ctx context.Context, in *FindBuyerRequest, opts ...grpc.CallOption) (*FindBuyerResponse, error)
}

type userServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserServiceClient(cc grpc.ClientConnInterface) UserServiceClient {
	return &userServiceClient{cc}
}

func (c *userServiceClient) SaveBuyerData(ctx context.Context, in *SaveBuyerRequest, opts ...grpc.CallOption) (*SaveBuyerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveBuyerResponse)
	err := c.cc.Invoke(ctx, UserService_SaveBuyerData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindSeller(ctx context.Context, in *FindSellerRequest, opts ...grpc.CallOption) (*FindSellerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindSellerResponse)
	err := c.cc.Invoke(ctx, UserService_FindSeller_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) UpdateSellerBalance(ctx context.Context, in *UpdateSellerBalanceRequest, opts ...grpc.CallOption) (*UpdateSellerBalanceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateSellerBalanceResponse)
	err := c.cc.Invoke(ctx, UserService_UpdateSellerBalance_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userServiceClient) FindBuyer(ctx context.Context, in *FindBuyerRequest, opts ...grpc.CallOption) (*FindBuyerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindBuyerResponse)
	err := c.cc.Invoke(ctx, UserService_FindBuyer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServiceServer is the server API for UserService service.
// All implementations must embed UnimplementedUserServiceServer
// for forward compatibility.
type UserServiceServer interface {
	SaveBuyerData(context.Context, *SaveBuyerRequest) (*SaveBuyerResponse, error)
	FindSeller(context.Context, *FindSellerRequest) (*FindSellerResponse, error)
	UpdateSellerBalance(context.Context, *UpdateSellerBalanceRequest) (*UpdateSellerBalanceResponse, error)
	FindBuyer(context.Context, *FindBuyerRequest) (*FindBuyerResponse, error)
	mustEmbedUnimplementedUserServiceServer()
}

// UnimplementedUserServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserServiceServer struct{}

func (UnimplementedUserServiceServer) SaveBuyerData(context.Context, *SaveBuyerRequest) (*SaveBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveBuyerData not implemented")
}
func (UnimplementedUserServiceServer) FindSeller(context.Context, *FindSellerRequest) (*FindSellerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindSeller not implemented")
}
func (UnimplementedUserServiceServer) UpdateSellerBalance(context.Context, *UpdateSellerBalanceRequest) (*UpdateSellerBalanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSellerBalance not implemented")
}
func (UnimplementedUserServiceServer) FindBuyer(context.Context, *FindBuyerRequest) (*FindBuyerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindBuyer not implemented")
}
func (UnimplementedUserServiceServer) mustEmbedUnimplementedUserServiceServer() {}
func (UnimplementedUserServiceServer) testEmbeddedByValue()                     {}

// UnsafeUserServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServiceServer will
// result in compilation errors.
type UnsafeUserServiceServer interface {
	mustEmbedUnimplementedUserServiceServer()
}

func RegisterUserServiceServer(s grpc.ServiceRegistrar, srv UserServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserService_ServiceDesc, srv)
}

func _UserService_SaveBuyerData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).SaveBuyerData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_SaveBuyerData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).SaveBuyerData(ctx, req.(*SaveBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindSeller_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindSellerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindSeller(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindSeller_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindSeller(ctx, req.(*FindSellerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_UpdateSellerBalance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateSellerBalanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).UpdateSellerBalance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_UpdateSellerBalance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).UpdateSellerBalance(ctx, req.(*UpdateSellerBalanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserService_FindBuyer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindBuyerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServiceServer).FindBuyer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserService_FindBuyer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServiceServer).FindBuyer(ctx, req.(*FindBuyerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserService_ServiceDesc is the grpc.ServiceDesc for UserService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UserService",
	HandlerType: (*UserServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SaveBuyerData",
			Handler:    _UserService_SaveBuyerData_Handler,
		},
		{
			MethodName: "FindSeller",
			Handler:    _UserService_FindSeller_Handler,
		},
		{
			MethodName: "UpdateSellerBalance",
			Handler:    _UserService_UpdateSellerBalance_Handler,
		},
		{
			MethodName: "FindBuyer",
			Handler:    _UserService_FindBuyer_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
